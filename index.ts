import { CliPrompts } from "./src/cli/prompts";
import { ExcelHandler } from "./src/core/excel-handler";
import { Comparator } from "./src/core/comparator";
import type { ComparisonResult } from "./src/types/types";
import { StringIndexer } from "./src/core/indexer";

async function main() {
  console.clear();
  try {
    const startTime = Date.now();
    console.log("‚è≥ –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞...");

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è Ctrl+C
    process.on("SIGINT", () => {
      console.log("\n\n‚èπÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
      process.exit(0);
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.time("üïí –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
    const { firstFile, secondFile } = await CliPrompts.getFilePaths();
    const mapping = await CliPrompts.getColumnMapping();
    const targetTable = await CliPrompts.getTargetTable();
    console.timeEnd("üïí –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");

    // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    console.time("üïí –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");
    const [firstData, secondData] = await Promise.all([
      ExcelHandler.readColumn(firstFile, mapping.sourceColumn),
      ExcelHandler.readColumn(secondFile, mapping.targetColumn),
    ]);
    console.timeEnd("üïí –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");

    const indexer = new StringIndexer();
    indexer.buildIndex(secondData, 3); // 3 –ø–µ—Ä–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ –∫–∞–∫ –∫–ª—é—á

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    console.time("üïí –í—Ä–µ–º—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");
    const results = firstData.map((sourceValue) => {
      const candidates = indexer.getCandidates(sourceValue);
      const bestMatch = candidates.reduce(
        (best, targetValue) => {
          const current = Comparator.isMatch(
            sourceValue,
            targetValue,
            mapping.threshold,
          );
          console.log(
            `–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: "${sourceValue}" —Å "${targetValue}" - —Å—Ö–æ–∂–µ—Å—Ç—å: ${current.similarity}`,
          );
          return current.similarity > best.similarity ? current : best;
        },
        { similarity: 0, match: false } as ComparisonResult,
      );
      return bestMatch;
    });
    console.timeEnd("üïí –í—Ä–µ–º—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.time("üïí –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤");
    const targetFile = targetTable === "–ø–µ—Ä–≤–∞—è" ? firstFile : secondFile;
    await ExcelHandler.writeResults(targetFile, results, "Match Status");
    console.timeEnd("üïí –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤");

    const endTime = Date.now();
    const totalTime = (endTime - startTime) / 1000;
    console.log(
      `‚úÖ –§–∞–π–ª—ã –ø—Ä–æ—à–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ! –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalTime} —Å–µ–∫—É–Ω–¥`,
    );
  } catch (error) {
    console.error("‚ùå Error:", error instanceof Error ? error.message : error);
    process.exit(1);
  }
}

main();
