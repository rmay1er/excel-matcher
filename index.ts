import { CliPrompts } from "./src/cli/prompts";
import { ExcelHandler } from "./src/core/excel-handler";
import { Comparator } from "./src/core/comparator";
import type { ComparisonResult } from "./src/types/types";
import { StringIndexer } from "./src/core/indexer";

async function main() {
  console.clear();

  let lastBatchTime: number | null = null;

  try {
    const startTime = Date.now();
    console.log("‚è≥ –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞...");

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è Ctrl+C
    process.on("SIGINT", () => {
      console.log("\n\n‚èπÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
      process.exit(0);
    });

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.time("üïí –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
    const { firstFile, secondFile } = await CliPrompts.getFilePaths();
    const mapping = await CliPrompts.getColumnMapping();
    const targetTable = await CliPrompts.getTargetTable();
    console.timeEnd("üïí –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");

    console.log(`üìÑ –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª: ${firstFile}`);
    console.log(`üìÑ –í—Ç–æ—Ä–æ–π —Ñ–∞–π–ª: ${secondFile}`);
    console.log(`üî§ –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${mapping.sourceColumn} -> ${mapping.targetColumn}`);
    console.log(`üéØ –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏: ${mapping.threshold}`);
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤: ${targetTable === '–ø–µ—Ä–≤–∞—è' ? '–ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª' : '–í—Ç–æ—Ä–æ–π —Ñ–∞–π–ª'}`);

    // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    console.time("üïí –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");
    const [firstData, secondData] = await Promise.all([
      ExcelHandler.readColumn(firstFile, mapping.sourceColumn),
      ExcelHandler.readColumn(secondFile, mapping.targetColumn),
    ]);
    console.timeEnd("üïí –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");

    const indexer = new StringIndexer();
    indexer.buildIndex(secondData, 3); // 3 –ø–µ—Ä–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ –∫–∞–∫ –∫–ª—é—á

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    console.time("üïí –í—Ä–µ–º—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");
    const batchSize = 100;
    const results: ComparisonResult[] = [];

    for (let i = 0; i < firstData.length; i += batchSize) {
      const batch = firstData.slice(i, i + batchSize);
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞
      const batchResults = await Promise.all(
        batch.map(async (sourceValue) => {
          const candidates = indexer.getCandidates(sourceValue);
          let bestMatch: ComparisonResult = { similarity: 0, match: false };
          for (const targetValue of candidates) {
            if (!Comparator.preFilter(sourceValue, targetValue, mapping.threshold)) {
              continue;
            }
            const current = Comparator.isMatch(
              sourceValue,
              targetValue,
              mapping.threshold,
            );
            if (current.similarity > bestMatch.similarity) {
              bestMatch = current;
            }
          }
          return bestMatch;
        }),
      );
      results.push(...batchResults);

      const batchEnd = Math.min(i + batchSize, firstData.length);
      const now = Date.now();
      if (!lastBatchTime) lastBatchTime = now;
      const elapsed = (now - lastBatchTime) / 1000;
      lastBatchTime = now;

      console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${batchEnd} –∏–∑ ${firstData.length} (–≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—Ç–∏–∏: ${elapsed.toFixed(2)} —Å–µ–∫)`);
      console.log(`–ö–µ—à Comparator.size: ${Comparator['cache'].size}`);
    }
    console.timeEnd("üïí –í—Ä–µ–º—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.time("üïí –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤");
    const targetFile = targetTable === "–ø–µ—Ä–≤–∞—è" ? firstFile : secondFile;
    await ExcelHandler.writeResults(targetFile, results, "Match Status");
    console.timeEnd("üïí –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤");

    const endTime = Date.now();
    const totalTime = (endTime - startTime) / 1000;
    console.log(
      `‚úÖ –§–∞–π–ª—ã –ø—Ä–æ—à–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ! –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalTime.toFixed(2)} —Å–µ–∫—É–Ω–¥`,
    );
  } catch (error) {
    console.error("‚ùå Error:", error instanceof Error ? error.message : error);
    process.exit(1);
  }
}

main();
